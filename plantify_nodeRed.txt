[
    {
        "id": "266c5bda39835834",
        "type": "tab",
        "label": "plantify 4.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "419b79b54abbb6bc",
        "type": "serial in",
        "z": "266c5bda39835834",
        "name": "",
        "serial": "99b0633030211818",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "684bb4a782a5b705"
            ]
        ]
    },
    {
        "id": "684bb4a782a5b705",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 106",
        "func": "// Function node code\nvar data = msg.payload.split(\",\");  // Split the comma-separated string into an array of values\nvar humidity = data[0];\nvar temperature = data[1];\nvar lmTemp = data[2];\nvar soil =data[3];\nvar light = data[4];\nvar water_level = data[5];\n \nmsg.payload = {\n    \"humidity\": humidity,\n    \"temperature\": temperature,\n    \"lm_temp\": lmTemp,\n    \"Soil_moiustre\": soil ,\n    \"Light\": light ,\n    \"Water_Level\": water_level\n    \n\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "f84bcebe9fa99d8e",
                "de7aa9dae7c82233",
                "6b264d55b92b7b7c",
                "d39b853589e2b9f7",
                "cca76c208f322c3c",
                "3be51788c5b40def",
                "bea9904b23225ad3",
                "65554b00af695299"
            ]
        ]
    },
    {
        "id": "f84bcebe9fa99d8e",
        "type": "http request",
        "z": "266c5bda39835834",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://127.0.0.1:8000/out",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fe267c4a30180693",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "for light",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 840,
        "wires": []
    },
    {
        "id": "8c67eabede1cf2c1",
        "type": "http in",
        "z": "266c5bda39835834",
        "name": "",
        "url": "/led",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1220,
        "y": 820,
        "wires": [
            [
                "35c1844e865b7207",
                "c3b26148315b188b"
            ]
        ]
    },
    {
        "id": "35c1844e865b7207",
        "type": "http response",
        "z": "266c5bda39835834",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 800,
        "wires": []
    },
    {
        "id": "c3b26148315b188b",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 107",
        "func": "msg.payload = msg.payload.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 840,
        "wires": [
            [
                "fe267c4a30180693",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "e673674b02f293cb",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 108",
        "func": "msg.payload = msg.payload.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 940,
        "wires": [
            [
                "3a46e91a33af34ac",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "3a46e91a33af34ac",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "for water pump",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 920,
        "wires": []
    },
    {
        "id": "6a49075c32f93ec3",
        "type": "http in",
        "z": "266c5bda39835834",
        "name": "",
        "url": "/water_pump",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1190,
        "y": 940,
        "wires": [
            [
                "e673674b02f293cb",
                "e9b3eac9ca4b0800"
            ]
        ]
    },
    {
        "id": "e9b3eac9ca4b0800",
        "type": "http response",
        "z": "266c5bda39835834",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 980,
        "wires": []
    },
    {
        "id": "e158a8f3871f6a78",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 109",
        "func": "msg.payload =msg.payload.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1040,
        "wires": [
            [
                "01ac7456ce34a3eb",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "7c5ad565a1862ae8",
        "type": "http in",
        "z": "266c5bda39835834",
        "name": "",
        "url": "/fan",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1160,
        "y": 1040,
        "wires": [
            [
                "e158a8f3871f6a78",
                "30e85ed6be0e6513"
            ]
        ]
    },
    {
        "id": "30e85ed6be0e6513",
        "type": "http response",
        "z": "266c5bda39835834",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 1080,
        "wires": []
    },
    {
        "id": "01ac7456ce34a3eb",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "for fan",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4080858a351b069e",
        "type": "serial out",
        "z": "266c5bda39835834",
        "name": "",
        "serial": "99b0633030211818",
        "x": 1890,
        "y": 920,
        "wires": []
    },
    {
        "id": "de7aa9dae7c82233",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 620,
        "wires": []
    },
    {
        "id": "376116b8ee9c7969",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "809b69ea18bf4af4",
        "order": 55,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1020,
        "y": 100,
        "wires": []
    },
    {
        "id": "6b264d55b92b7b7c",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "Humidity value extract ",
        "func": "var humidity = parseFloat(msg.payload.humidity); // Parse the humidity value as a float\nmsg.payload = humidity; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "376116b8ee9c7969",
                "580b0d6dea2e1e98"
            ]
        ]
    },
    {
        "id": "5274de71a1266dfb",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "aad2e4f22a3781bc",
        "order": 25,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{value}}C",
        "min": "-20",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1030,
        "y": 200,
        "wires": []
    },
    {
        "id": "d39b853589e2b9f7",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "Temperature value extract ",
        "func": "var temp = parseFloat(msg.payload.temperature); // Parse the humidity value as a float\nmsg.payload = temp; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "5274de71a1266dfb",
                "f94a19fe774b4b0e"
            ]
        ]
    },
    {
        "id": "d10e94d1406d1f0f",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "88f1d0402e673684",
        "order": 25,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "LM Temperature",
        "label": "units",
        "format": "{{value}}C",
        "min": "-20",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "cca76c208f322c3c",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "LM temp value extract ",
        "func": "var lm = parseFloat(msg.payload.lm_temp); // Parse the humidity value as a float\nmsg.payload = lm; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            [
                "d10e94d1406d1f0f",
                "c3ae07a84dc0fbe0"
            ]
        ]
    },
    {
        "id": "d641922e992c56dc",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "4b69b8fbb806518a",
        "order": 25,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Soil",
        "label": "units",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 360,
        "wires": []
    },
    {
        "id": "3be51788c5b40def",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "Soil value extract ",
        "func": "var soil = parseFloat(msg.payload.Soil_moiustre); // Parse the humidity value as a float\nmsg.payload = soil; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "d641922e992c56dc",
                "d88fc556f7b42a5e"
            ]
        ]
    },
    {
        "id": "2899da1707e0352a",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "cf128d67433935a5",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Light ",
        "label": "units",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "bea9904b23225ad3",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "Light value extract ",
        "func": "var light = parseFloat(msg.payload.Light); // Parse the humidity value as a float\nmsg.payload = light; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "2899da1707e0352a",
                "d1226e88c02c9899"
            ]
        ]
    },
    {
        "id": "580b0d6dea2e1e98",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "809b69ea18bf4af4",
        "order": 54,
        "width": 0,
        "height": 0,
        "label": "Humidity chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f94a19fe774b4b0e",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "aad2e4f22a3781bc",
        "order": 26,
        "width": 0,
        "height": 0,
        "label": "Temperature chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "60",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c3ae07a84dc0fbe0",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "88f1d0402e673684",
        "order": 26,
        "width": 0,
        "height": 0,
        "label": "Temperature chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "60",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#a2520b",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d88fc556f7b42a5e",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "4b69b8fbb806518a",
        "order": 26,
        "width": 0,
        "height": 0,
        "label": "Soil chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "65554b00af695299",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "Water level value extract ",
        "func": "var waterLVL = parseFloat(msg.payload.Water_Level); // Parse the humidity value as a float\nmsg.payload = waterLVL; // Set the payload to the humidity value\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "a6e1018aadedefbe",
                "11b7e31c1e51aabb"
            ]
        ]
    },
    {
        "id": "a6e1018aadedefbe",
        "type": "ui_gauge",
        "z": "266c5bda39835834",
        "name": "",
        "group": "4c4e8d03fbc642e2",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Water level",
        "label": "units",
        "format": "{{value}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1030,
        "y": 540,
        "wires": []
    },
    {
        "id": "d1226e88c02c9899",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "cf128d67433935a5",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Light chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "11b7e31c1e51aabb",
        "type": "ui_chart",
        "z": "266c5bda39835834",
        "name": "",
        "group": "4c4e8d03fbc642e2",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Water Level chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "f9b41df9d2412181",
        "type": "http request",
        "z": "266c5bda39835834",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2091882/fields/1/last.json?api_key=88SH981PVMNONNPF",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 1180,
        "wires": [
            [
                "321ea50844f93bcc"
            ]
        ]
    },
    {
        "id": "321ea50844f93bcc",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 119",
        "func": "\nvar data = JSON.parse(msg.payload);\n\n// Extract the value of \"field1\" from the received data\nvar field1Value = data.field1;\n\n// Get the previous value of \"field1\" from context\nvar previousFieldValue = context.get('previousFieldValue') || '';\n\n// Compare the current value to the previous value\nif (field1Value !== previousFieldValue) {\n    // If the values are different, update the context with the new value\n    context.set('previousFieldValue', field1Value);\n\n    // Output the value of \"field1\" as the payload of the message\n    msg.payload = field1Value;\n\n    // Send the message\n    return msg;\n} else {\n    // If the values are the same, do not send a message\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1180,
        "wires": [
            [
                "983c866b34f17d04",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "983c866b34f17d04",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "Light button",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 1180,
        "wires": []
    },
    {
        "id": "094cde34bf7edb73",
        "type": "inject",
        "z": "266c5bda39835834",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1110,
        "y": 1300,
        "wires": [
            [
                "f9b41df9d2412181",
                "6cd7bd6424ccae12",
                "e86990a3c378f337"
            ]
        ]
    },
    {
        "id": "6cd7bd6424ccae12",
        "type": "http request",
        "z": "266c5bda39835834",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2132061/fields/1/last.json?api_key=BJLYUMC6PGLJGWSH",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 1240,
        "wires": [
            [
                "b2aa30121c22333d"
            ]
        ]
    },
    {
        "id": "b2aa30121c22333d",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 120",
        "func": "\nvar data = JSON.parse(msg.payload);\n\n// Extract the value of \"field1\" from the received data\nvar field1Value = data.field1;\n\n// Get the previous value of \"field1\" from context\nvar previousFieldValue = context.get('previousFieldValue') || '';\n\n// Compare the current value to the previous value\nif (field1Value !== previousFieldValue) {\n    // If the values are different, update the context with the new value\n    context.set('previousFieldValue', field1Value);\n\n    // Output the value of \"field1\" as the payload of the message\n    msg.payload = field1Value;\n\n    // Send the message\n    return msg;\n} else {\n    // If the values are the same, do not send a message\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1240,
        "wires": [
            [
                "129e53cd43e9cb03",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "129e53cd43e9cb03",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "Water pump button ",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e86990a3c378f337",
        "type": "http request",
        "z": "266c5bda39835834",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2132064/fields/1/last.json?api_key=4FSLCQTE6ORM1ZDB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 1300,
        "wires": [
            [
                "3e81d067b8f5cce8"
            ]
        ]
    },
    {
        "id": "3e81d067b8f5cce8",
        "type": "function",
        "z": "266c5bda39835834",
        "name": "function 121",
        "func": "\nvar data = JSON.parse(msg.payload);\n\n// Extract the value of \"field1\" from the received data\nvar field1Value = data.field1;\n\n// Get the previous value of \"field1\" from context\nvar previousFieldValue = context.get('previousFieldValue') || '';\n\n// Compare the current value to the previous value\nif (field1Value !== previousFieldValue) {\n    // If the values are different, update the context with the new value\n    context.set('previousFieldValue', field1Value);\n\n    // Output the value of \"field1\" as the payload of the message\n    msg.payload = field1Value;\n\n    // Send the message\n    return msg;\n} else {\n    // If the values are the same, do not send a message\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1300,
        "wires": [
            [
                "cf99c7c9802a5672",
                "4080858a351b069e"
            ]
        ]
    },
    {
        "id": "cf99c7c9802a5672",
        "type": "debug",
        "z": "266c5bda39835834",
        "name": "Fan button ",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 1320,
        "wires": []
    },
    {
        "id": "990330c6cda84f0e",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "90499284328198fc",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "1710e0bb010579ec",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 50,
        "width": 6,
        "height": 1
    },
    {
        "id": "d57d45d9632a2bb1",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 51,
        "width": 6,
        "height": 1
    },
    {
        "id": "be06e0c418254557",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 52,
        "width": 6,
        "height": 1
    },
    {
        "id": "4965cdcb178664c1",
        "type": "ui_spacer",
        "z": "266c5bda39835834",
        "name": "spacer",
        "group": "809b69ea18bf4af4",
        "order": 53,
        "width": 6,
        "height": 1
    },
    {
        "id": "99b0633030211818",
        "type": "serial-port",
        "serialport": "COM3",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "809b69ea18bf4af4",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "6cd89811f6d4f3ef",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aad2e4f22a3781bc",
        "type": "ui_group",
        "name": "DHT11 temp",
        "tab": "6cd89811f6d4f3ef",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "88f1d0402e673684",
        "type": "ui_group",
        "name": "LM temp",
        "tab": "6cd89811f6d4f3ef",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b69b8fbb806518a",
        "type": "ui_group",
        "name": "Soil",
        "tab": "6cd89811f6d4f3ef",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf128d67433935a5",
        "type": "ui_group",
        "name": "Light ",
        "tab": "6cd89811f6d4f3ef",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4c4e8d03fbc642e2",
        "type": "ui_group",
        "name": "Water level",
        "tab": "6cd89811f6d4f3ef",
        "order": 7,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6cd89811f6d4f3ef",
        "type": "ui_tab",
        "name": "Plantify",
        "icon": "default",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]